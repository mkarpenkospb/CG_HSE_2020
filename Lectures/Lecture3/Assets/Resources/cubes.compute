#pragma kernel kernel1
#pragma multi_compile_instancing


RWStructuredBuffer<float3> vertexes;
RWStructuredBuffer<float3> normals;
RWStructuredBuffer<int> indexes;
RWStructuredBuffer<float3> cubesCenters;
RWStructuredBuffer<int3> CaseToEdges;

int _cubeEdges[12][2] = {
    {0, 1}, 
    {1, 2}, 
    {2, 3}, 
    {3, 0}, 
    {4, 5}, 
    {5, 6}, 
    {6, 7}, 
    {7, 4}, 
    {0, 4}, 
    {1, 5}, 
    {2, 6}, 
    {3, 7} 
};


int CaseToTrianglesCount[256] = {
    0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 2, 3, 4, 4, 3, 3, 4, 4, 3, 4, 5, 5, 2,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
    2, 3, 3, 4, 3, 4, 2, 3, 3, 4, 4, 5, 4, 5, 3, 2, 3, 4, 4, 3, 4, 5, 3, 2, 4, 5, 5, 4, 5, 2, 4, 1,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4, 5, 3, 2, 4, 3, 4, 3, 5, 2,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4, 3, 4, 4, 3, 4, 5, 5, 4, 4, 3, 5, 2, 5, 4, 2, 1,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 2, 3, 3, 2, 3, 4, 4, 5, 4, 5, 5, 2, 4, 3, 5, 4, 3, 2, 4, 1,
    3, 4, 4, 5, 4, 5, 3, 4, 4, 5, 5, 2, 3, 4, 2, 1, 2, 3, 3, 2, 3, 4, 2, 1, 3, 2, 4, 1, 2, 1, 1, 0
};

float delta;

float xStartPoint;
float yStartPoint;
float zStartPoint;

int cubesCount;
int xCount;
int yCount;
int zCount;

float F(float3 vecInput)
{
    float f = 0;
    for(int i = 0; i < cubesCount; ++i)
    {
        float3 vec = cubesCenters[i] - vecInput;
        f += 1/(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
    }
    
    return f - 1;
}
float3 CalculateNormal(float3 pt)
{
    static float dN = 0.001f;
    static float3 dx = float3(dN, 0, 0);
    static float3 dy = float3(0, dN, 0);
    static float3 dz = float3(0, 0, dN);
    return -normalize(float3(
        F(pt + dx) - F(pt - dx),
        F(pt + dy) - F(pt - dy),
        F(pt + dz) - F(pt - dz)
    ));
}

[numthreads(1,1,1)]
void kernel1 (uint3 id : SV_DispatchThreadID)
{
    int cubeVertexId = xCount * yCount * id.z + xCount * id.y + id.x;
    
    int xPos = id.x;
    int yPos = id.y;
    int zPos = id.z;

    float3 cube[8] = {
        float3(xPos * delta + xStartPoint, yPos * delta + yStartPoint, zPos * delta + zStartPoint),
        float3(xPos * delta + xStartPoint, (yPos + 1) * delta + yStartPoint, zPos * delta + zStartPoint),
        float3((xPos + 1) * delta + xStartPoint, (yPos + 1) * delta + yStartPoint, zPos * delta + zStartPoint),
        float3((xPos + 1) * delta + xStartPoint, yPos * delta + yStartPoint, zPos * delta + zStartPoint),

        float3(xPos * delta + xStartPoint, yPos * delta + yStartPoint, (zPos + 1) * delta + zStartPoint),
        float3(xPos * delta + xStartPoint, (yPos + 1) * delta + yStartPoint, (zPos + 1) * delta + zStartPoint),
        float3((xPos + 1) * delta + xStartPoint, (yPos + 1) * delta + yStartPoint, (zPos + 1) * delta + zStartPoint),
        float3((xPos + 1) * delta + xStartPoint, yPos * delta + yStartPoint, (zPos + 1) * delta + zStartPoint)
    };
    
    int cubeCase = 0;
    for(int i = 0; i < 8; ++i)
    {
        cubeCase += pow(2, i) * (F(cube[i]) > 0 ? 1 : 0);
        vertexes[i] = cube[i];
        indexes[0] = max(indexes[0], cubeCase);
    }
/*
    for(int j = 0; j < CaseToTrianglesCount[cubeCase]; ++j)
    {
        int3 edgeIndex = CaseToEdges[cubeCase * 5 + j];
        int edgeVertexes1[2] = _cubeEdges[edgeIndex.x];
        int edgeVertexes2[2] = _cubeEdges[edgeIndex.y];
        int edgeVertexes3[2] = _cubeEdges[edgeIndex.z];
        float3 pt1 = lerp(cube[edgeVertexes1[0]], cube[edgeVertexes1[1]],
            -F(edgeVertexes1[0]) / (F(edgeVertexes1[1]) - F(edgeVertexes1[0])));
        float3 pt2 = lerp(cube[edgeVertexes2[0]], cube[edgeVertexes2[1]],
            -F(edgeVertexes2[0]) / (F(edgeVertexes2[1]) - F(edgeVertexes2[0])));
        float3 pt3 = lerp(cube[edgeVertexes3[0]], cube[edgeVertexes3[1]],
            -F(edgeVertexes3[0]) / (F(edgeVertexes3[1]) - F(edgeVertexes3[0])));

        int vId = cubeVertexId * 5 * 3 + j * 3;
        
        vertexes[vId] = pt1;
        vertexes[vId + 1] = pt2;
        vertexes[vId + 2] = pt3;

        normals[vId] = CalculateNormal(pt1);
        normals[vId + 1] = CalculateNormal(pt2);
        normals[vId + 2] = CalculateNormal(pt3);

        indexes[vId] = vId;
        indexes[vId + 1] = vId + 1;
        indexes[vId + 2] = vId + 2;
    }
    
    for (int k = CaseToTrianglesCount[cubeCase]; k < 5; ++k)
    {
        int vId = cubeVertexId * 5 * 3 + 3 * k;
        indexes[vId] = vId;
        indexes[vId + 1] = vId + 1;
        indexes[vId + 2] = vId + 2;
    }
    */
    
}